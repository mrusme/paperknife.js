paperKnife = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_address_list(context) {
        var cacheKey = "address_list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_address(context);
        if (result4 !== null) {
          var result5 = [];
          var savedPos1 = pos;
          var result7 = parse_address_split(context);
          if (result7 !== null) {
            var result8 = parse_address(context);
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
          while (result6 !== null) {
            result5.push(result6);
            var savedPos1 = pos;
            var result7 = parse_address_split(context);
            if (result7 !== null) {
              var result8 = parse_address(context);
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(sD) {
          
            var ret = [sD[0]];
          
            for(var i=0; i < sD[1].length; ++i)
            {
             ret.push( sD[1][i][1] );
            }
            return ret;
          })(result3)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_obs_addr_list(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_address(context) {
        var cacheKey = "address" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_mailbox(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_group(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mailbox(context) {
        var cacheKey = "mailbox" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_name_addr(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_addr_spec(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_name_addr(context) {
        var cacheKey = "name_addr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_phrase(context);
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_angle_addr(context);
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(dn, aa) { 
            return [ dn[0],  aa[2][0], aa[2][1], (typeof aa[4][0][0] != "undefined" ? aa[4][0][0][1] : {}) ]; 
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_angle_addr(context) {
        var cacheKey = "angle_addr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_CFWS(context);
        var result3 = result9 !== null ? result9 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === "<") {
            var result4 = "<";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("<"));
            }
          }
          if (result4 !== null) {
            var result5 = parse_addr_spec(context);
            if (result5 !== null) {
              if (input.substr(pos, 1) === ">") {
                var result6 = ">";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(">"));
                }
              }
              if (result6 !== null) {
                var result8 = parse_CFWS(context);
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result2 = [result3, result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_obs_angle_addr(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_group(context) {
        var cacheKey = "group" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_phrase(context);
        if (result1 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result2 = ":";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(":"));
            }
          }
          if (result2 !== null) {
            var result10 = parse_mailbox_list(context);
            if (result10 !== null) {
              var result7 = result10;
            } else {
              var result9 = parse_CFWS(context);
              var result8 = result9 !== null ? result9 : '';
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            }
            var result3 = result7 !== null ? result7 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result4 = ";";
                pos += 1;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(";"));
                }
              }
              if (result4 !== null) {
                var result6 = parse_CFWS(context);
                var result5 = result6 !== null ? result6 : '';
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_phrase(context) {
        var cacheKey = "phrase" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_word(context);
        if (result5 !== null) {
          var result4 = [];
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_word(context);
          }
        } else {
          var result4 = null;
        }
        var result3 = result4 !== null
          ? (function(ph) { 
          
          var str = "";
          if(typeof ph[0].value == "undefined")
          {
            for(var i = 0; i < ph.length; ++i)
            {
              str += ph[i][1].join("") + (i == ph.length - 1 ? "" : " ");
            }
          }
          else
          {
            str = ph[0].value;
          }
          return [{ type: "displayname", value: str }]; 
          })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_obs_phrase(context);
          var result1 = result2 !== null
            ? (function(ph) { return ph.join(""); })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_phrase(context) {
        var cacheKey = "obs_phrase" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_word(context);
        if (result1 !== null) {
          var result2 = [];
          var result6 = parse_word(context);
          if (result6 !== null) {
            var result3 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result3 = result5;
            } else {
              var result4 = parse_WSP(context);
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          }
          while (result3 !== null) {
            result2.push(result3);
            var result6 = parse_word(context);
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_WSP(context);
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mailbox_list(context) {
        var cacheKey = "mailbox_list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_mailbox(context);
        if (result3 !== null) {
          var result4 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ",") {
            var result6 = ",";
            pos += 1;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(","));
            }
          }
          if (result6 !== null) {
            var result7 = parse_mailbox(context);
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result6 !== null) {
              var result7 = parse_mailbox(context);
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          }
          if (result4 !== null) {
            var result2 = [result3, result4];
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_obs_mbox_list(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_addr_spec(context) {
        var cacheKey = "addr_spec" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_local_part(context);
        if (result2 !== null) {
          if (input.substr(pos, 1) === "@") {
            var result3 = "@";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("@"));
            }
          }
          if (result3 !== null) {
            var result4 = parse_domain(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(lp, dm) { return [ 
                          { type: "localpart", value: lp[1] }, { type: "domain", value: dm[1] }
                        ] 
          })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_local_part(context) {
        var cacheKey = "local_part" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_dot_atom(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_quoted_string(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_obs_local_part(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_domain(context) {
        var cacheKey = "domain" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_dot_atom(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_domain_literal(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_obs_domain(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_domain_literal(context) {
        var cacheKey = "domain_literal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_dcontent(context);
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_dcontent(context);
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("]"));
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dcontent(context) {
        var cacheKey = "dcontent" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_dtext(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_quoted_pair(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dtext(context) {
        var cacheKey = "dtext" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_NO_WS_CTL(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[!-\/0-Z^-~]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed("[!-\\/0-Z^-~]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_angle_addr(context) {
        var cacheKey = "obs_angle_addr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_CFWS(context);
        var result1 = result9 !== null ? result9 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "<") {
            var result2 = "<";
            pos += 1;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("<"));
            }
          }
          if (result2 !== null) {
            var result8 = parse_obs_route(context);
            var result3 = result8 !== null ? result8 : '';
            if (result3 !== null) {
              var result4 = parse_addr_spec(context);
              if (result4 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result5 = ">";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(">"));
                  }
                }
                if (result5 !== null) {
                  var result7 = parse_CFWS(context);
                  var result6 = result7 !== null ? result7 : '';
                  if (result6 !== null) {
                    var result0 = [result1, result2, result3, result4, result5, result6];
                  } else {
                    var result0 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_mbox_list(context) {
        var cacheKey = "obs_mbox_list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result11 = parse_mailbox(context);
        var result5 = result11 !== null ? result11 : '';
        if (result5 !== null) {
          var result10 = parse_CFWS(context);
          var result6 = result10 !== null ? result10 : '';
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result7 !== null) {
              var result9 = parse_CFWS(context);
              var result8 = result9 !== null ? result9 : '';
              if (result8 !== null) {
                var result4 = [result5, result6, result7, result8];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result1 = [];
          while (result4 !== null) {
            result1.push(result4);
            var savedPos1 = pos;
            var result11 = parse_mailbox(context);
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              var result10 = parse_CFWS(context);
              var result6 = result10 !== null ? result10 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result7 = ",";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result7 !== null) {
                  var result9 = parse_CFWS(context);
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        if (result1 !== null) {
          var result3 = parse_mailbox(context);
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_addr_list(context) {
        var cacheKey = "obs_addr_list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result11 = parse_address(context);
        var result5 = result11 !== null ? result11 : '';
        if (result5 !== null) {
          var result10 = parse_CFWS(context);
          var result6 = result10 !== null ? result10 : '';
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result7 !== null) {
              var result9 = parse_CFWS(context);
              var result8 = result9 !== null ? result9 : '';
              if (result8 !== null) {
                var result4 = [result5, result6, result7, result8];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result1 = [];
          while (result4 !== null) {
            result1.push(result4);
            var savedPos1 = pos;
            var result11 = parse_address(context);
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              var result10 = parse_CFWS(context);
              var result6 = result10 !== null ? result10 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result7 = ",";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result7 !== null) {
                  var result9 = parse_CFWS(context);
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
        } else {
          var result1 = null;
        }
        if (result1 !== null) {
          var result3 = parse_address(context);
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dot_atom(context) {
        var cacheKey = "dot_atom" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_CFWS(context);
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          var result2 = parse_dot_atom_text(context);
          if (result2 !== null) {
            var result4 = parse_CFWS(context);
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dot_atom_text(context) {
        var cacheKey = "dot_atom_text" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result8 = parse_atext(context);
        if (result8 !== null) {
          var result2 = [];
          while (result8 !== null) {
            result2.push(result8);
            var result8 = parse_atext(context);
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result5 = ".";
            pos += 1;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result5 !== null) {
            var result7 = parse_atext(context);
            if (result7 !== null) {
              var result6 = [];
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_atext(context);
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result5 !== null) {
              var result7 = parse_atext(context);
              if (result7 !== null) {
                var result6 = [];
                while (result7 !== null) {
                  result6.push(result7);
                  var result7 = parse_atext(context);
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(at, bt) { 
             var str = at.join("");
            for(var i = 0; i < bt.length; ++i) {
              str += "." + bt[i][1].join("");
            }
            return str;
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quoted_string(context) {
        var cacheKey = "quoted_string" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result14 = parse_CFWS(context);
        var result2 = result14 !== null ? result14 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "\"") {
            var result3 = "\"";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("\""));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result13 = parse_FWS(context);
            var result11 = result13 !== null ? result13 : '';
            if (result11 !== null) {
              var result12 = parse_qcontent(context);
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
            while (result10 !== null) {
              result4.push(result10);
              var savedPos1 = pos;
              var result13 = parse_FWS(context);
              var result11 = result13 !== null ? result13 : '';
              if (result11 !== null) {
                var result12 = parse_qcontent(context);
                if (result12 !== null) {
                  var result10 = [result11, result12];
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result9 = parse_FWS(context);
              var result5 = result9 !== null ? result9 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === "\"") {
                  var result6 = "\"";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("\""));
                  }
                }
                if (result6 !== null) {
                  var result8 = parse_CFWS(context);
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qstr) {
             var str = "";
             for(var i = 0; i < qstr.length; ++i) {
                str += (qstr[i][0][1] == ' ' ? ' ' : '') + qstr[i][1];
             }
             return str;
          })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_local_part(context) {
        var cacheKey = "obs_local_part" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_word(context);
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result4 !== null) {
            var result5 = parse_word(context);
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ".") {
              var result4 = ".";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result4 !== null) {
              var result5 = parse_word(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_domain(context) {
        var cacheKey = "obs_domain" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_atom(context);
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result4 !== null) {
            var result5 = parse_atom(context);
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ".") {
              var result4 = ".";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result4 !== null) {
              var result5 = parse_atom(context);
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_quoted_pair(context) {
        var cacheKey = "quoted_pair" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result3 = "\\";
          pos += 1;
        } else {
          var result3 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result3 !== null) {
          var result4 = parse_text(context);
          if (result4 !== null) {
            var result2 = [result3, result4];
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_obs_qp(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NO_WS_CTL(context) {
        var cacheKey = "NO_WS_CTL" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[- 0@P`p°Ààð]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[- 0@P`p°Ààð]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_route(context) {
        var cacheKey = "obs_route" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_CFWS(context);
        var result1 = result6 !== null ? result6 : '';
        if (result1 !== null) {
          var result2 = parse_obs_domain_list(context);
          if (result2 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result3 = ":";
              pos += 1;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(":"));
              }
            }
            if (result3 !== null) {
              var result5 = parse_CFWS(context);
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atext(context) {
        var cacheKey = "atext" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z0-9!#-'*+\-\/=?^-`{-~]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (context.reportMatchFailures) {
            matchFailed("[a-zA-Z0-9!#-'*+\\-\\/=?^-`{-~]");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos).match(/^[Â¡-Â¿]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[Â¡-Â¿]");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos).match(/^[¡-ÿ]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed("[¡-ÿ]");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qcontent(context) {
        var cacheKey = "qcontent" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_qtext(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_quoted_pair(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_word(context) {
        var cacheKey = "word" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_atom(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_quoted_string(context);
          var result1 = result2 !== null
            ? (function(w) {
              return { type: "displayname" , value: w }
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_atom(context) {
        var cacheKey = "atom" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_CFWS(context);
        var result1 = result6 !== null ? result6 : '';
        if (result1 !== null) {
          var result5 = parse_atext(context);
          if (result5 !== null) {
            var result2 = [];
            while (result5 !== null) {
              result2.push(result5);
              var result5 = parse_atext(context);
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result4 = parse_CFWS(context);
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_text(context) {
        var cacheKey = "text" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[-°ÀÐàð]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[-°ÀÐàð]");
          }
        }
        if (result1 !== null) {
          var result2 = parse_obs_text(context);
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_qp(context) {
        var cacheKey = "obs_qp" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\\"));
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[-\0 °ÀÐàð]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed("[-\\0 °ÀÐàð]");
            }
          }
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_domain_list(context) {
        var cacheKey = "obs_domain_list" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result1 = "@";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("@"));
          }
        }
        if (result1 !== null) {
          var result2 = parse_domain(context);
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = [];
            var result12 = parse_CFWS(context);
            if (result12 !== null) {
              var result10 = result12;
            } else {
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(","));
                }
              }
              if (result11 !== null) {
                var result10 = result11;
              } else {
                var result10 = null;;
              };
            }
            while (result10 !== null) {
              result5.push(result10);
              var result12 = parse_CFWS(context);
              if (result12 !== null) {
                var result10 = result12;
              } else {
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result11 !== null) {
                  var result10 = result11;
                } else {
                  var result10 = null;;
                };
              }
            }
            if (result5 !== null) {
              var result9 = parse_CFWS(context);
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === "@") {
                  var result7 = "@";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("@"));
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_domain(context);
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = [];
              var result12 = parse_CFWS(context);
              if (result12 !== null) {
                var result10 = result12;
              } else {
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(","));
                  }
                }
                if (result11 !== null) {
                  var result10 = result11;
                } else {
                  var result10 = null;;
                };
              }
              while (result10 !== null) {
                result5.push(result10);
                var result12 = parse_CFWS(context);
                if (result12 !== null) {
                  var result10 = result12;
                } else {
                  if (input.substr(pos, 1) === ",") {
                    var result11 = ",";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(","));
                    }
                  }
                  if (result11 !== null) {
                    var result10 = result11;
                  } else {
                    var result10 = null;;
                  };
                }
              }
              if (result5 !== null) {
                var result9 = parse_CFWS(context);
                var result6 = result9 !== null ? result9 : '';
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "@") {
                    var result7 = "@";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("@"));
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse_domain(context);
                    if (result8 !== null) {
                      var result4 = [result5, result6, result7, result8];
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_qtext(context) {
        var cacheKey = "qtext" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_NO_WS_CTL(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos).match(/^[#-[\]-~!]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (context.reportMatchFailures) {
              matchFailed("[#-[\\]-~!]");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos).match(/^[¡-ÿ]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed("[¡-ÿ]");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_text(context) {
        var cacheKey = "obs_text" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result11 = parse_LF(context);
        while (result11 !== null) {
          result1.push(result11);
          var result11 = parse_LF(context);
        }
        if (result1 !== null) {
          var result2 = [];
          var result10 = parse_CR(context);
          while (result10 !== null) {
            result2.push(result10);
            var result10 = parse_CR(context);
          }
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            var result5 = parse_obs_char(context);
            if (result5 !== null) {
              var result6 = [];
              var result9 = parse_LF(context);
              while (result9 !== null) {
                result6.push(result9);
                var result9 = parse_LF(context);
              }
              if (result6 !== null) {
                var result7 = [];
                var result8 = parse_CR(context);
                while (result8 !== null) {
                  result7.push(result8);
                  var result8 = parse_CR(context);
                }
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              var result5 = parse_obs_char(context);
              if (result5 !== null) {
                var result6 = [];
                var result9 = parse_LF(context);
                while (result9 !== null) {
                  result6.push(result9);
                  var result9 = parse_LF(context);
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result8 = parse_CR(context);
                  while (result8 !== null) {
                    result7.push(result8);
                    var result8 = parse_CR(context);
                  }
                  if (result7 !== null) {
                    var result4 = [result5, result6, result7];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LF(context) {
        var cacheKey = "LF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result0 = " ";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CR(context) {
        var cacheKey = "CR" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "Ð") {
          var result0 = "Ð";
          pos += 1;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("Ð"));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CRLF(context) {
        var cacheKey = "CRLF" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "Ð ") {
          var result0 = "Ð ";
          pos += 2;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("Ð "));
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_char(context) {
        var cacheKey = "obs_char" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[-\0°Ààð]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (context.reportMatchFailures) {
            matchFailed("[-\\0°Ààð]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CFWS(context) {
        var cacheKey = "CFWS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var savedPos2 = pos;
        var result11 = parse_FWS(context);
        var result9 = result11 !== null ? result11 : '';
        if (result9 !== null) {
          var result10 = parse_comment(context);
          if (result10 !== null) {
            var result8 = [result9, result10];
          } else {
            var result8 = null;
            pos = savedPos2;
          }
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        while (result8 !== null) {
          result1.push(result8);
          var savedPos2 = pos;
          var result11 = parse_FWS(context);
          var result9 = result11 !== null ? result11 : '';
          if (result9 !== null) {
            var result10 = parse_comment(context);
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos2;
            }
          } else {
            var result8 = null;
            pos = savedPos2;
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var result7 = parse_FWS(context);
          var result5 = result7 !== null ? result7 : '';
          if (result5 !== null) {
            var result6 = parse_comment(context);
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result3 = parse_FWS(context);
            if (result3 !== null) {
              var result2 = result3;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FWS(context) {
        var cacheKey = "FWS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result8 = [];
        var result10 = parse_WSP(context);
        while (result10 !== null) {
          result8.push(result10);
          var result10 = parse_WSP(context);
        }
        if (result8 !== null) {
          var result9 = parse_CRLF(context);
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result4 = result7 !== null ? result7 : '';
        if (result4 !== null) {
          var result6 = parse_WSP(context);
          if (result6 !== null) {
            var result5 = [];
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_WSP(context);
            }
          } else {
            var result5 = null;
          }
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_obs_FWS(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 0) === "") {
              var result1 = "";
              pos += 0;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(""));
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_obs_FWS(context) {
        var cacheKey = "obs_FWS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result7 = parse_WSP(context);
        if (result7 !== null) {
          var result1 = [];
          while (result7 !== null) {
            result1.push(result7);
            var result7 = parse_WSP(context);
          }
        } else {
          var result1 = null;
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var result4 = parse_CRLF(context);
          if (result4 !== null) {
            var result6 = parse_WSP(context);
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WSP(context);
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var result4 = parse_CRLF(context);
            if (result4 !== null) {
              var result6 = parse_WSP(context);
              if (result6 !== null) {
                var result5 = [];
                while (result6 !== null) {
                  result5.push(result6);
                  var result6 = parse_WSP(context);
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WSP(context) {
        var cacheKey = "WSP" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "") {
            var result1 = "";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(""));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ctext(context) {
        var cacheKey = "ctext" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_NO_WS_CTL(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[!-'*-~]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed("[!-'*-~]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ccontent(context) {
        var cacheKey = "ccontent" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_ctext(context);
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_quoted_pair(context);
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_comment(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment(context) {
        var cacheKey = "comment" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse_FWS(context);
          var result8 = result10 !== null ? result10 : '';
          if (result8 !== null) {
            var result9 = parse_ccontent(context);
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          while (result7 !== null) {
            result3.push(result7);
            var savedPos1 = pos;
            var result10 = parse_FWS(context);
            var result8 = result10 !== null ? result10 : '';
            if (result8 !== null) {
              var result9 = parse_ccontent(context);
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result6 = parse_FWS(context);
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result5 = ")";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(")"));
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(cm) { 
            var str = "";
            for(var i=0; i<cm.length; ++i)
            {
              str += cm[i][1];
            }
            return { type: "comment", value: str };
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_address_split(context) {
        var cacheKey = "address_split" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === ",") {
          var result2 = ",";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(","));
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === ";") {
            var result1 = ";";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(";"));
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_address_list({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();